"""
Author: Monzur Muhammad
Description:
Given a vessel name the functions finds the correct vessel and print out all the resources available.
"""

include nmclient.repy
include rsa.repy

def get_vesselport_resources(portnum):
  """
  <Started>
    April 25, 2009
	
  <Author>
    Monzur Muhammad
	
  <Purpose>
    Find all the vessels that have the port number requested and then return a dictionary with all the vessels
    and their resources that are available
	
  <Arguments>
    portnum(int) - the port number that the user is looking for 
	
  <Exceptions>
    No exceptions
	
  <Side Effects>
    No side effects
	
  <Result>
    returns a dictionary where the keys are the vessel name and the values are a list of resources.
    resources can be accessed by returnresult[vessel_name][resource_name]
  """

  nmhandle = nmclient_createhandle(getmyip(), 1224)
	
  #dictionary that contains all the resources for the vessel
  resultdict={}
	
  #get a list of all the vessels 
  vessel_group = nmclient_getvesseldict(nmhandle)
	
  #go through all the vessels 
  for cur_vessel in vessel_group['vessels']:
    resource_dict=get_vesselname_resources(cur_vessel)
			
    #check to see if the current vessel has the port number as one of the resource, if not then continue on to the next vessel
    if str(portnum) in resource_dict[cur_vessel]['messport']:
      resultdict[cur_vessel]=resource_dict[cur_vessel]
	
	elif str(portnum) in resource_dict[cur_vessel]['connport']:
	  resultdict[cur_vessel]=resource_dict[cur_vessel]
			
  return resultdict

def get_vesselname_resources(vesselname, ipaddr=getmyip(), portval=1224):
  """
   <Started>
    April 25, 2009
	
  <Author>
    Monzur Muhammad
	
  <Purpose>
    Given a vessel name, find all the resources available for that vessel and return a dictionary of the resources for that vessel
	
  <Arguments>
    vesselname(string) - the vessel that the user wants the resource for
	ipaddr-the ip address for which to get the vessels for. By default its local ip address
	portval-the port number for which to find vessels. By defaults its 1224

  <Exceptions>
    Throws InvalidVessel exception on an invalide vessel name input
	
  <Side Effects>
    No side effects
	
  <Result>
    returns a dictionary where the keys are the vessel name and the values are a list of resources.
    resources can be accessed by returnresult[vessel_name][resource_name]
  """	

  nmhandle = nmclient_createhandle(ipaddr, portval)
	
  #dictionary that contains all the resources for the vessel
  resultdict={}

  #initialize the list for the vessel that the user is looking for  
  resultdict[vesselname]={}
	
  #if vessel name is invalid, throw an error
  try:
    fullresources = nmclient_rawsay(nmhandle, "GetVesselResources",vesselname)
  except InvalidVessel:
    raise VesselError, "Invalid vessel name"

  for cur_resource in fullresources.split('\n'):
    if 'resource' in cur_resource:
      #gets rid of the keyword 'resource ' and then seperates the resource name and the resource value
      partial_resource_line = cur_resource.split('resource ')[1].split('#')[0]
      resource_name = partial_resource_line.split(' ')[0]
      resource_value = partial_resource_line.split(' ')[1]
	  
      #if its a new type of resource then add it in the dictionary as an empty list
      if not resource_name in resultdict[vesselname].keys():
      resultdict[vesselname][resource_name]=[]
	  
      #adds the resrouce value in the list for the resource
      resultdict[vesselname][resource_name].append(resource_value)
	  
  return resultdict
					

	
	

