"""
<Description>
  Tests if send acts like regular socket usually and
  has special feature of timeout.
  
<Date>
  Sun Mar  1 10:27:35 PST 2009
"""

include sockettimeout.repy

IP = "323dfas"
PORT = 23
ANS = 4
MESS = "hi"

def test_send():
  tsock = TimeoutSocket()
  tsock.sockobj = FakeSocket()
  assert tsock.send(MESS) == ANS

def test_send_twice():
  tsock = TimeoutSocket()
  tsock.sockobj = FakeSocket()
  assert tsock.send(MESS) == ANS
  assert tsock.send(MESS) == ANS

def test_send_timed_out():
  tsock = TimedoutSocket()
  tsock.settimeout(.01)
  tsock.sockobj = FakeSocket()
  try:
    tsock.send(MESS)
  except SocketTimeoutError:
    assert not tsock.sockobj # closed??
  else:
    raise Exception("should have timed out")

def test_send_error():
  tsock = ErrorySocket()
  tsock.settimeout(1)
  try:
    tsock.send(MESS)
  except ErroryError:
    pass
  else:
    raise Exception("should have timed out")

def test_send_error_and_timeout():
  tsock = ErrorySocket()
  tsock.sockobj = FakeSocket()
  tsock.settimeout(.01)
  try:
    tsock.send(MESS)
  except SocketTimeoutError:
    pass
  else:
    raise Exception("should have timed out")

############################
class FakeSocket:
  def send(self, data):
    assert data == MESS
    return ANS

  def close(self): pass

##################
# Timeout Sockets
################
class TimedoutSocket(TimeoutSocket):
  def _send(self, data):
    sleep(.2)
    return ANS

class ErroryError(Exception): 
  """Test exception"""

class ErrorySocket(TimeoutSocket):
  def _send(self, len):
    sleep(.2) # maybe timeout as well
    raise ErroryError("no dice")

def main():
  test_send()
  test_send_twice()
  test_send_timed_out()
#  test_send_error()
#  test_send_error_and_timeout()

if callfunc == 'initialize':
  main()
