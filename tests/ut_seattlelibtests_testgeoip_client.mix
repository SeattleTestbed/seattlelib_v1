"""
<Program Name>
  test_geoip_client.repy

<Started>
  Feb 15, 2010

<Author>
  Evan Meagher

<Purpose>
  Runs unit tests on geoip_client.repy.

  These tests assume the presence of a working remote geoip server.
"""

#pragma repy

include geoip_client.repy

if callfunc == 'initialize':
  geoip_init_client(['http://betaseattleclearinghouse.poly.edu:12679', 'http://geoip.cs.washington.edu:12679'])

  # Test geoip_record_by_name method by verifying location info of google.com
  location_dict = geoip_record_by_name('poly.edu')


  expected_result = {'area_code': 718, 'city': 'Brooklyn', 'country_code': 'US', 'country_code3': 'USA', 'country_name': 'United States', 'dma_code': 501, 'latitude': 40.694400000000002, 'longitude': -73.990600000000001, 'postal_code': '11201', 'region_name': 'NY'}

  assert(expected_result['country_name'] == location_dict['country_name'])
  assert(expected_result['city'] == location_dict['city'])
  assert(expected_result['area_code'] == location_dict['area_code'])
  assert(expected_result['region_name'] == location_dict['region_name'])
  assert(expected_result['postal_code'] == location_dict['postal_code'])

  # Test geoip_location_str method
  assert(geoip_location_str(location_dict) == "Brooklyn, NY, United States")

  
  # Test geoip_record_by_name method by verifying location info of
  # 128.208.3.200 (cs.washington.edu)
  expected_result = {'city': 'Seattle', 'region_name': 'WA', 'area_code': 206, 'longitude': -122.2919, 'country_code3': 'USA', 'country_name': 'United States', 'postal_code': '98105', 'dma_code': 819, 'country_code': 'US', 'latitude': 47.660599999999988}


  location_dict = geoip_record_by_addr('128.208.3.200')

  assert(expected_result['country_name'] == location_dict['country_name'])
  assert(expected_result['city'] == location_dict['city'])
  assert(expected_result['area_code'] == location_dict['area_code'])
  assert(expected_result['region_name'] == location_dict['region_name'])
  assert(expected_result['postal_code'] == location_dict['postal_code'])

  # Test geoip_location_str method
  assert(geoip_location_str(location_dict) == "Seattle, WA, United States")
  
  # Try to connect to an invalid ip:port
  geoip_init_client(['http://geoip.cs.washington.edu:1010'])
  try:
    location_dict = geoip_record_by_name('amazon.com')
  except Exception, e:
    pass
  else:
    raise Exception("geoip_record_by_name was supposed to raise an error, but didn't!")
