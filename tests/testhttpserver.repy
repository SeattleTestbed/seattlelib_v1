"""
httpserver.repy unit tests
"""



include httpserver.repy



def func1(info):
  # Basic callback function
  res = {}
  res["version"] = "1.1"
  res["statuscode"] = 200
  res["statusmsg"] = "OK"
  res["headers"] = {"Content-Type": "text/html"}
  res["message"] = str(info['path']) + "\n"
  if info['verb'] == "POST":
    res["message"] += str(len(info["poststr"])) + "\n"
  return res



def sendall(sock, data):
  while len(data) > 0:
    data = data[sock.send(data):]



def recvall(sock):
  data = ""
  try:
    while True:
      data += sock.recv(4096)
  except Exception, e:
    if "Socket closed" in str(e):
      return data
    raise



def test1():
  # Test a basic HTTP/1.0 GET request
  test1 = \
      "GET /test1 HTTP/1.0\r\n" + \
      "\r\n"

  test1exp = \
      "HTTP/1.0 200 OK\r\n" + \
      "Content-Type: text/html\r\n" + \
      "\r\n" + \
      "/test1\n"

  return (test1, test1exp)



def test2():
  # Test a basic HTTP/1.0 POST request
  test2 = \
      "POST /test2 HTTP/1.0\r\n" + \
      "Content-Length: 5\r\n" + \
      "\r\n" + \
      "12345"

  test2exp = \
      "HTTP/1.0 200 OK\r\n" + \
      "Content-Type: text/html\r\n" + \
      "\r\n" + \
      "/test2\n" + \
      "5\n"

  return (test2, test2exp)



def test3():
  # Test a basic HTTP/1.1 GET request
  test3 = \
      "GET /test3 HTTP/1.1\r\n" + \
      "Connection: close\r\n" + \
      "\r\n"

  test3exp = \
      "HTTP/1.1 200 OK\r\n" + \
      "Content-Type: text/html\r\n" + \
      "Content-Length: 7\r\n" + \
      "\r\n" + \
      "/test3\n"

  return (test3, test3exp)



def test4():
  # Test two pipelined HTTP/1.1 GET requests
  test4 = \
      "GET /test4a HTTP/1.1\r\n" + \
      "\r\n" + \
      "GET /test4b HTTP/1.1\r\n" + \
      "Connection: close\r\n" + \
      "\r\n"

  test4exp = \
      "HTTP/1.1 200 OK\r\n" + \
      "Content-Type: text/html\r\n" + \
      "Content-Length: 8\r\n" + \
      "\r\n" + \
      "/test4a\n" + \
      "HTTP/1.1 200 OK\r\n" + \
      "Content-Type: text/html\r\n" + \
      "Content-Length: 8\r\n" + \
      "\r\n" + \
      "/test4b\n"

  return (test4, test4exp)



def test5():
  # Test a basic chunked HTTP/1.1 PUT request
  test5 = \
      "PUT /test5 HTTP/1.1\r\n" + \
      "Connection: close\r\n" + \
      "Transfer-Encoding: chunked\r\n" + \
      "\r\n" + \
      "A\r\n" + \
      "1234567890\r\n" + \
      "0\r\n" + \
      "\r\n"

  test5exp = \
      "HTTP/1.1 200 OK\r\n" + \
      "Content-Type: text/html\r\n" + \
      "Content-Length: 7\r\n" + \
      "\r\n" + \
      "/test5\n"

  return (test5, test5exp)



def test6():
  # Test a more complex chunked HTTP/1.1 POST request
  test6 = \
      "POST /test6 HTTP/1.1\r\n" + \
      "Connection: close\r\n" + \
      "Transfer-Encoding: chunked\r\n" + \
      "\r\n" + \
      "2\r\n" + \
      "12\r\n" + \
      "5\r\n" + \
      "12345\r\n" + \
      "0\r\n" + \
      "\r\n"

  test6exp = \
      "HTTP/1.1 200 OK\r\n" + \
      "Content-Type: text/html\r\n" + \
      "Content-Length: 9\r\n" + \
      "\r\n" + \
      "/test6\n" + \
      "7\n"

  return (test6, test6exp)



def test7():
  # Tests correct RFC 822 header handling
  test7 = \
      "GET /test7 HTTP/1.1\r\n" + \
      "Connection:\r\n" + \
      "    close\r\n" + \
      "Content-Type: who cares?\r\n" + \
      "Accept-Encoding:\r\n" + \
      "\t*\r\n" + \
      "X-Foobar-Hdr: Baz\r\n" + \
      "\r\n"

  test7exp = \
      "HTTP/1.1 200 OK\r\n" + \
      "Content-Type: text/html\r\n" + \
      "Content-Length: 7\r\n" + \
      "\r\n" + \
      "/test7\n"

  return (test7, test7exp)



def test8():
  # Tests HTTP/0.9 requests (we handle these as misformed requests)
  test8 = \
      "GET /test8\r\n"

  test8exp = \
      "HTTP/1.0 400 Bad Request\r\n" + \
      "Content-Type: text/plain\r\n" + \
      "\r\n" + \
      "HTTP/0.9 or malformed request.\r\n"

  return (test8, test8exp)



def test9():
  # Tests some garbage
  test9 = \
      "12315125021453\r\n23042086235"

  test9exp = \
      "HTTP/1.0 400 Bad Request\r\n" + \
      "Content-Type: text/plain\r\n" + \
      "\r\n" + \
      "HTTP/0.9 or malformed request.\r\n"

  return (test9, test9exp)



def test10():
  # Tests handling of Content-Length + Transfer-Encoding.
  # (This is against the spec, but HTTP/1.1 servers *should* ignore
  # Content-Length and follow Transfer-Encoding.)
  test10 = \
      "POST /test10 HTTP/1.1\r\n" + \
      "Transfer-Encoding: chunked\r\n" + \
      "Content-Length: 10\r\n" + \
      "Connection: close\r\n" + \
      "\r\n" + \
      "1C\r\n" + \
      "1234567890123456789012345678\r\n" + \
      "0\r\n" + \
      "\r\n"

  test10exp = \
      "HTTP/1.1 200 OK\r\n" + \
      "Content-Type: text/html\r\n" + \
      "Content-Length: 11\r\n" + \
      "\r\n" + \
      "/test10\n28\n"

  return (test10, test10exp)



def test11():
  # Tests handling of unsupported Transfer-Encodings.
  test11 = \
      "POST /test11 HTTP/1.1\r\n" + \
      "Transfer-Encoding: gzip, chunked\r\n" + \
      "Connection: close\r\n" + \
      "\r\n" + \
      "1C\r\n" + \
      "1234567890123456789012345678\r\n" + \
      "0\r\n" + \
      "\r\n"

  test11exp = \
      "HTTP/1.1 501 Not Implemented\r\n" + \
      "Content-Length: 56\r\n" + \
      "Connection: close\r\n" + \
      "Content-Type: text/plain\r\n" + \
      "\r\n" + \
      "Cannot handle any transfer-codings other than chunked.\r\n"

  return (test11, test11exp)





def tests():
  id = httpserver_registercallback(('127.0.0.1', 12345), func1)

  failed = []
  for test in [test1, test2, test3, test4, test5, test6, test7, test8, \
      test9, test10, test11]:
    a = openconn('127.0.0.1', 12345)
    send, expected = test()
    sendall(a, send)
    actual = recvall(a)
    try:
      assert (actual == expected)
    except AssertionError, ae:
      failed.append((str(test), expected, actual))
    a.close()

  httpserver_stopcallback(id)

  for failure in failed:
    print "A test failed:"
    print failure[0]
    print "Expected:"
    print failure[1]
    print "Actual:"
    print failure[2]



if callfunc == "initialize":
  tests()
