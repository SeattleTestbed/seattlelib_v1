"""
<Program Name>
  testbase64.py

<Started>
  April 14, 2009

<Author>
  Michael Phan-Ba

<Purpose>
  Runs unit tests on base64.repy.

"""

include base64.repy

if callfunc == 'initialize':

  # Standard hello world tests
  decoded_string = "Hello world!"
  encoded_string = "SGVsbG8gd29ybGQh"
  assert(b64encode(decoded_string) == encoded_string)
  assert(b64decode(encoded_string) == decoded_string)
  assert(standard_b64encode(decoded_string) == encoded_string)
  assert(standard_b64decode(encoded_string) == decoded_string)
  assert(urlsafe_b64encode(decoded_string) == encoded_string)
  assert(urlsafe_b64decode(encoded_string) == decoded_string)

  # Empty string tests
  decoded_string = ""
  encoded_string = ""
  assert(b64encode(decoded_string) == encoded_string)
  assert(b64decode(encoded_string) == decoded_string)
  assert(standard_b64encode(decoded_string) == encoded_string)
  assert(standard_b64decode(encoded_string) == decoded_string)
  assert(urlsafe_b64encode(decoded_string) == encoded_string)
  assert(urlsafe_b64decode(encoded_string) == decoded_string)

  # Alignment tests: 1 byte
  decoded_string = "\x01"
  encoded_string = "AQ=="
  assert(b64encode(decoded_string) == encoded_string)
  assert(b64decode(encoded_string) == decoded_string)
  assert(standard_b64encode(decoded_string) == encoded_string)
  assert(standard_b64decode(encoded_string) == decoded_string)
  assert(urlsafe_b64encode(decoded_string) == encoded_string)
  assert(urlsafe_b64decode(encoded_string) == decoded_string)

  # Alignment tests: 2 bytes
  decoded_string = "\x01\x10"
  encoded_string = "ARA="
  assert(b64encode(decoded_string) == encoded_string)
  assert(b64decode(encoded_string) == decoded_string)
  assert(standard_b64encode(decoded_string) == encoded_string)
  assert(standard_b64decode(encoded_string) == decoded_string)
  assert(urlsafe_b64encode(decoded_string) == encoded_string)
  assert(urlsafe_b64decode(encoded_string) == decoded_string)

  # Safe encoding test
  decoded_string = "\xfb\xff\xbd"
  encoded_string = "+/+9"
  safe_encoded_string = "-_-9"
  assert(b64encode(decoded_string) == encoded_string)
  assert(b64decode(encoded_string) == decoded_string)
  assert(standard_b64encode(decoded_string) == encoded_string)
  assert(standard_b64decode(encoded_string) == decoded_string)
  assert(urlsafe_b64encode(decoded_string) == safe_encoded_string)
  assert(urlsafe_b64decode(safe_encoded_string) == decoded_string)

  # Custom encoding test
  decoded_string = "\xfb\xff\xbd"
  encoded_string = "?!?9"
  mapping = "?!"
  assert(b64encode(decoded_string, mapping) == encoded_string)
  assert(b64decode(encoded_string, mapping) == decoded_string)

  # Selected quote tests
  decoded_string = '''"Why are we inspired by another person's courage?
    Maybe because it gives us the sweet and genuine surprise of
    discovering some trace, at least, of the same courage in
    ourselves." --Laurence Shames'''
  encoded_string = 'IldoeSBhcmUgd2UgaW5zcGlyZWQgYnkgYW5vdGhlciBwZXJzb24\
ncyBjb3VyYWdlPwogICAgTWF5YmUgYmVjYXVzZSBpdCBnaXZlcyB1cyB0aGUgc3dlZXQgYW\
5kIGdlbnVpbmUgc3VycHJpc2Ugb2YKICAgIGRpc2NvdmVyaW5nIHNvbWUgdHJhY2UsIGF0I\
GxlYXN0LCBvZiB0aGUgc2FtZSBjb3VyYWdlIGluCiAgICBvdXJzZWx2ZXMuIiAtLUxhdXJl\
bmNlIFNoYW1lcw=='
  assert(b64encode(decoded_string) == encoded_string)
  assert(b64decode(encoded_string) == decoded_string)
  assert(standard_b64encode(decoded_string) == encoded_string)
  assert(standard_b64decode(encoded_string) == decoded_string)
  assert(urlsafe_b64encode(decoded_string) == encoded_string)
  assert(urlsafe_b64decode(encoded_string) == decoded_string)

  # Lorem ipsum test
  decoded_string = '''Lorem ipsum dolor sit amet, consectetur
    adipisicing elit, sed do eiusmod tempor incididunt ut labore et
    dolore magna aliqua. Ut enim ad minim veniam, quis nostrud
    exercitation ullamco laboris nisi ut aliquip ex ea commodo
    consequat. Duis aute irure dolor in reprehenderit in voluptate velit
    esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat
    cupidatat non proident, sunt in culpa qui officia deserunt mollit
    anim id est laborum.'''
  encoded_string = 'TG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQsIGNvbnNlY3RldHV\
yCiAgICBhZGlwaXNpY2luZyBlbGl0LCBzZWQgZG8gZWl1c21vZCB0ZW1wb3IgaW5jaWRpZH\
VudCB1dCBsYWJvcmUgZXQKICAgIGRvbG9yZSBtYWduYSBhbGlxdWEuIFV0IGVuaW0gYWQgb\
WluaW0gdmVuaWFtLCBxdWlzIG5vc3RydWQKICAgIGV4ZXJjaXRhdGlvbiB1bGxhbWNvIGxh\
Ym9yaXMgbmlzaSB1dCBhbGlxdWlwIGV4IGVhIGNvbW1vZG8KICAgIGNvbnNlcXVhdC4gRHV\
pcyBhdXRlIGlydXJlIGRvbG9yIGluIHJlcHJlaGVuZGVyaXQgaW4gdm9sdXB0YXRlIHZlbG\
l0CiAgICBlc3NlIGNpbGx1bSBkb2xvcmUgZXUgZnVnaWF0IG51bGxhIHBhcmlhdHVyLiBFe\
GNlcHRldXIgc2ludCBvY2NhZWNhdAogICAgY3VwaWRhdGF0IG5vbiBwcm9pZGVudCwgc3Vu\
dCBpbiBjdWxwYSBxdWkgb2ZmaWNpYSBkZXNlcnVudCBtb2xsaXQKICAgIGFuaW0gaWQgZXN\
0IGxhYm9ydW0u'
  assert(b64encode(decoded_string) == encoded_string)
  assert(b64decode(encoded_string) == decoded_string)
  assert(standard_b64encode(decoded_string) == encoded_string)
  assert(standard_b64decode(encoded_string) == decoded_string)
  assert(urlsafe_b64encode(decoded_string) == encoded_string)
  assert(urlsafe_b64decode(encoded_string) == decoded_string)

  # Random data test
  decoded_string = '0i5\xe1\xf2\x97\xe0\x10@G3\xe6\xae\x8f@\xfbg|\x1bcq\
\x0esm\xe0X:\x1f\xaa\xd9 \x03.:o\x97\xee\x03St\xe0E{\x1b\x94cz\x94\xd6\
\x98\xf7 ;E)\xa5/\xbcN\xd9\xa1+\x99.3\xd9\x90\xa9\x05\xa0\xe9\x10\xa6\
\x9d\xe2_\xa06\x0f\xf5\xa0\x7f\xfd}\x1dy\xf7\xd7\x08\xe3[E7\xf3K\xdb\
\xcb\xb8\xd1\xbf\xe1 n\xb3\x06\x9a\xadZu\xef)#6\xc8\x1c\xc5\xc9\xcc\
\xe13\x05 \x99+\xbb\xad\xcc/!ZpW\xa4_\x91\xe0B@\xafM\xf1o^\x13k\xd0v\
\xf4?\xe7\xf3\x93\xf0\x1b\x13\x00\x0f,\x0fA\x9a\xc1\x1e\x08K\x16\xc3\
\xbd\xc5\xa3\x82\xa2aXGk\n\x9a\xba\xab?\x8e\xc6\xb4\x00\xd3*\xf7h\x0c\
\x95\xa7\xc9\xfe\xe8\xa9\x8bxw\x16#\xa3\xa1\xaefS\xa5|IF%\x18\xdbBiBa\
\xd9D\xc6\x87\x91lk\xe4,tJ\xc4\x08\xc9\xa3\xe8~>c"\xef%\x182P\xfa0]\
\xa9\x00\xab\xdbC*\xcd\x05\x05 \x1c\x10\xe4\x8f\xd3\xf6\xdc\xfdC\x0c\
\xad\xc2\xd2\xc2\x80wcF\xechz\xa3\x0c\xf7\xd3\xdd\xca(\'\xc7z\x1f\x94\
\xa4e\xbc~*$\xcc\x9b\x81j\xf9_iZ\x90\x08\x9f/m=\t\x86\xea\xc0\xd6\x9c\
\x17\x91\xbe\xabEoy)8;|\x99\xaea\x8d\xb6MH|\xb8\xa87\x82\x1e\t\xae\xf3\
\xe6tE\xf9\xd2\x8ey\xdd\x18\x89x\x0c\xd1X\x10\x16\xe7\xa8\xd6\xadvN\
\xc1\x00\x96\xc3\xe1B\xd2\xeeq \xb8\xce\x83wziX\x02\xa8\x02\xc2\xee\x00\
\xfc\xe0\xb7\x8c\xfa\x1216F\xf8d3\x04U1\xc9@\xb8\xea\x99S\xe6\xdb\x7f\
\xd0\xf1\x0e\x06\xbf\xd0\xa5\tm\xfc\xac\xaf\xf0;aT\r\xe4w\xab\xef\xfd\
\x84b,\x9beH\x97\xa0T\xe2\x91\xcf4\x1f\xcfD\\t\xc3a\xc4\x93\x9er\xecYvy\
\xfbG\xa9d\xa7K)sF\xf6\x97\xe3\xe1_\xc8G\xc1\xe7C\xaara\xc3\x98\xc9\x9f\
\xd9\xf8%h\xa1\xf1mO/o\xe7/\x0c\xa9\x02\n\xe7\xbb9g\x1a\x08\xcf\x9dc;\
\xd54\x907\xe8\x0cnl1\xf4Y\x88\xdcx\xb7\x84?\xbf3\x0c\xa9I ,b\xe0\x04\
\xf6\x86\x14\xfc\xde\x16\xc6\x84!\xb7-\x80\x85\xa4\xe5\xecR"\xfe\xc5\
\x17z\x8e\x11\xa5T\xee\x99\xe3\x8b\xc7\xear\xb2\xcd\xa7\xaf\xea\xe6\xd5\
V\x94\xecJ\xba\xc5c/\xd1\x0e\x0bt<\xdb\xcd\x86\xa5\t\xfas\xa4\xb7Q`e\
\x10\xd1{\xf9\x13\xdd\xbf\xfe9[\xaa\xfdN\x1f\xbd*/\xb86&\xd4\x84\xc7\
\xde\xbbL\xce\xc6\x8c\xd6\xc7=\xda\xcd\xf0\x84\xe0\xc5o\xf1\x92\x92-\
\xea\xd6l%\xa1G\xd3\xcf\x81]~"\xd3\xb3\x02\xa7k\x8d\xfa.\x122\xc8\x84)T\
\x1f\x9d\xa1Z\xf8\x05>\x89\x82T\xd8\x98y\x1d\xda\xa0\xce\xd2\x9d8\xb3H\
\t\x1c)O\x19\x8bT\xcb4\xefc\xc1\xc7\xfd\x98\xf6\x16\xfe\x0bF\x91\x0fu\
\x8d\xc6^\x7f\xcd\xdehb\xabV\x92\x19\xa7\x04P6\x04Z@B\xc9\x93\x165}\
\xce8\xc3B\xeeW\xa0*\xf1\xe7\x13\xd8M]\x18\x1a\xde\xe6@Y\x03\xfa\x06\
\xd4\xe4L\xb1T\xbaP\xc7d\xf6\x92xv\xd7A\xdbp\xf8~\xb8\x1b\xc1 \xb3\xfc\
\x90\xfa\xb0\x0f,\xdf\x90\xcf\xbe\x87y\xb7L\x80\xca\x8c\x00$\xea\x91\
\xd6\x9e[2\xc46\x14\x87ga\xffs\xe1\xd3Te\x85\xa4\xa1\xad\x04C\xd1C\xf3\
\xe0\xdb\xf3$d\x16\xf4\xec\xc3\xc8&\xdbFg<\xf9\xac\xc2i\xf4\xb5\xeawf"P\
\rP\r\xe3\xa4o\x0c\xc8P\xc7\x98\x9dy\xf6\xf0\x98{O\x9b\xf6\xab\xe9NxM\
\xf5I\x0b\x87A\xc1Rx\xca\x0cYi\xcb\x1d\xd5\xa0^,\xe9\xff\xdc\xda(\x153\
\xe5 M\x93\xa6\xcc0:\xf5\xef\x90\x85\xcbM\xfc\xac\xf7\x13\xd2i\xba\xff\
Eb(m0\xae\xe5s5\x9f*\x052\x08\x9b\x81\xc3Be\xdc\xe1\xfbrT4C\xeb\xc9#)\
\xf0\x9aS\x13\xf2\xf6\x871l\xb7\xdc\xf2\xcc\xc3$\xea\xbf\xed\xc0X\x95<\
\xe7\x14i1B\xfa.\x85\xbe\x02\x87\xde\xda\xa8'
  encoded_string = 'MGk14fKX4BBARzPmro9A+2d8G2NxDnNt4Fg6H6rZIAMuOm+X7gN\
TdOBFexuUY3qU1pj3IDtFKaUvvE7ZoSuZLjPZkKkFoOkQpp3iX6A2D/Wgf/19HXn31wjjW0\
U380vby7jRv+EgbrMGmq1ade8pIzbIHMXJzOEzBSCZK7utzC8hWnBXpF+R4EJAr03xb14Ta\
9B29D/n85PwGxMADywPQZrBHghLFsO9xaOComFYR2sKmrqrP47GtADTKvdoDJWnyf7oqYt4\
dxYjo6GuZlOlfElGJRjbQmlCYdlExoeRbGvkLHRKxAjJo+h+PmMi7yUYMlD6MF2pAKvbQyr\
NBQUgHBDkj9P23P1DDK3C0sKAd2NG7Gh6owz3093KKCfHeh+UpGW8fiokzJuBavlfaVqQCJ\
8vbT0JhurA1pwXkb6rRW95KTg7fJmuYY22TUh8uKg3gh4JrvPmdEX50o553RiJeAzRWBAW5\
6jWrXZOwQCWw+FC0u5xILjOg3d6aVgCqALC7gD84LeM+hIxNkb4ZDMEVTHJQLjqmVPm23/Q\
8Q4Gv9ClCW38rK/wO2FUDeR3q+/9hGIsm2VIl6BU4pHPNB/PRFx0w2HEk55y7Fl2eftHqWS\
nSylzRvaX4+FfyEfB50OqcmHDmMmf2fglaKHxbU8vb+cvDKkCCue7OWcaCM+dYzvVNJA36A\
xubDH0WYjceLeEP78zDKlJICxi4AT2hhT83hbGhCG3LYCFpOXsUiL+xRd6jhGlVO6Z44vH6\
nKyzaev6ubVVpTsSrrFYy/RDgt0PNvNhqUJ+nOkt1FgZRDRe/kT3b/+OVuq/U4fvSovuDYm\
1ITH3rtMzsaM1sc92s3whODFb/GSki3q1mwloUfTz4FdfiLTswKna436LhIyyIQpVB+doVr\
4BT6JglTYmHkd2qDO0p04s0gJHClPGYtUyzTvY8HH/Zj2Fv4LRpEPdY3GXn/N3mhiq1aSGa\
cEUDYEWkBCyZMWNX3OOMNC7legKvHnE9hNXRga3uZAWQP6BtTkTLFUulDHZPaSeHbXQdtw+\
H64G8Egs/yQ+rAPLN+Qz76HebdMgMqMACTqkdaeWzLENhSHZ2H/c+HTVGWFpKGtBEPRQ/Pg\
2/MkZBb07MPIJttGZzz5rMJp9LXqd2YiUA1QDeOkbwzIUMeYnXn28Jh7T5v2q+lOeE31SQu\
HQcFSeMoMWWnLHdWgXizp/9zaKBUz5SBNk6bMMDr175CFy038rPcT0mm6/0ViKG0wruVzNZ\
8qBTIIm4HDQmXc4ftyVDRD68kjKfCaUxPy9ocxbLfc8szDJOq/7cBYlTznFGkxQvouhb4Ch\
97aqA=='
  safe_encoded_string = 'MGk14fKX4BBARzPmro9A-2d8G2NxDnNt4Fg6H6rZIAMuOm\
-X7gNTdOBFexuUY3qU1pj3IDtFKaUvvE7ZoSuZLjPZkKkFoOkQpp3iX6A2D_Wgf_19HXn31\
wjjW0U380vby7jRv-EgbrMGmq1ade8pIzbIHMXJzOEzBSCZK7utzC8hWnBXpF-R4EJAr03x\
b14Ta9B29D_n85PwGxMADywPQZrBHghLFsO9xaOComFYR2sKmrqrP47GtADTKvdoDJWnyf7\
oqYt4dxYjo6GuZlOlfElGJRjbQmlCYdlExoeRbGvkLHRKxAjJo-h-PmMi7yUYMlD6MF2pAK\
vbQyrNBQUgHBDkj9P23P1DDK3C0sKAd2NG7Gh6owz3093KKCfHeh-UpGW8fiokzJuBavlfa\
VqQCJ8vbT0JhurA1pwXkb6rRW95KTg7fJmuYY22TUh8uKg3gh4JrvPmdEX50o553RiJeAzR\
WBAW56jWrXZOwQCWw-FC0u5xILjOg3d6aVgCqALC7gD84LeM-hIxNkb4ZDMEVTHJQLjqmVP\
m23_Q8Q4Gv9ClCW38rK_wO2FUDeR3q-_9hGIsm2VIl6BU4pHPNB_PRFx0w2HEk55y7Fl2ef\
tHqWSnSylzRvaX4-FfyEfB50OqcmHDmMmf2fglaKHxbU8vb-cvDKkCCue7OWcaCM-dYzvVN\
JA36AxubDH0WYjceLeEP78zDKlJICxi4AT2hhT83hbGhCG3LYCFpOXsUiL-xRd6jhGlVO6Z\
44vH6nKyzaev6ubVVpTsSrrFYy_RDgt0PNvNhqUJ-nOkt1FgZRDRe_kT3b_-OVuq_U4fvSo\
vuDYm1ITH3rtMzsaM1sc92s3whODFb_GSki3q1mwloUfTz4FdfiLTswKna436LhIyyIQpVB\
-doVr4BT6JglTYmHkd2qDO0p04s0gJHClPGYtUyzTvY8HH_Zj2Fv4LRpEPdY3GXn_N3mhiq\
1aSGacEUDYEWkBCyZMWNX3OOMNC7legKvHnE9hNXRga3uZAWQP6BtTkTLFUulDHZPaSeHbX\
Qdtw-H64G8Egs_yQ-rAPLN-Qz76HebdMgMqMACTqkdaeWzLENhSHZ2H_c-HTVGWFpKGtBEP\
RQ_Pg2_MkZBb07MPIJttGZzz5rMJp9LXqd2YiUA1QDeOkbwzIUMeYnXn28Jh7T5v2q-lOeE\
31SQuHQcFSeMoMWWnLHdWgXizp_9zaKBUz5SBNk6bMMDr175CFy038rPcT0mm6_0ViKG0wr\
uVzNZ8qBTIIm4HDQmXc4ftyVDRD68kjKfCaUxPy9ocxbLfc8szDJOq_7cBYlTznFGkxQvou\
hb4Ch97aqA=='
  assert(b64encode(decoded_string) == encoded_string)
  assert(b64decode(encoded_string) == decoded_string)
  assert(standard_b64encode(decoded_string) == encoded_string)
  assert(standard_b64decode(encoded_string) == decoded_string)
  assert(urlsafe_b64encode(decoded_string) == safe_encoded_string)
  assert(urlsafe_b64decode(safe_encoded_string) == decoded_string)

  print "All tests passed"
