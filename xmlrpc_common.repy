"""
<Program Name>
  xmlrpc_common.py

<Started>
  April 26, 2009

<Author>
  Michael Phan-Ba

<Purpose>
  Provides common methods related to XML-RPC.

  Encoding dateTime.iso8601 are not currently supported.

"""


include base64.repy
include xmlparse.repy





class xmlrpc_Binary(object):
  """
  <Purpose>
    Wrapper class for base64-encoded binary data in XML-RPC requests and
    responses.

  <Side Effects>
    None.

  <Example Use>
    blob = xmlrpc_Binary("\x00\x01\x00")

  """

  def __init__(self, data=""):
    """
    <Purpose>
      Create a new Binary object.

    <Arguments>
      data:
        A string representing an unencoded binary data.

    <Exceptions>
      None.

    """
    self.data = data





class xmlrpc_Fault(ValueError):
  """
  <Purpose>
    Exception representing a XML-RPC Fault.

  <Side Effects>
    None.

  <Example Use>
    raise xmlrpc_Fault("An error occurred", -1)

  """

  def __init__(self, message, code):
    """
    <Purpose>
      Create a new Fault exception.

    <Arguments>
      message:
        A string describing the fault.

      code:
        The integer code associated with the fault.

    <Exceptions>
      None.

    """
    self.message = message
    self.code = code
    ValueError.__init__(self, message)





class xmlrpc_XMLParseError(ValueError):
  """
  <Purpose>
    Exception representing an error in parsing XML-RPC data.

  <Side Effects>
    None.

  <Example Use>
    raise xmlrpc_XMLParseError()

  """





def xmlrpc_method_call_to_xml(method_name, params):
  """
  <Purpose>
    Build a XML-RPC method call.

  <Arguments>
    method_name:
      The method name.

    params:
      A sequence type of XML-RPC parameters.  A dictionary may also be
      passed, but the keys are ignored.

  <Exceptions>
    None.

  <Side Effects>
    None.

  <Returns>
    The XML-RPC method call string.

  """
  xml_string = '<?xml version="1.0"?>'
  xml_string += "<methodCall><methodName>%s</methodName>" % method_name
  xml_string += xmlrpc_params_to_xml(params)
  xml_string += "</methodCall>"

  return xml_string


def xmlrpc_method_response_to_xml(param):
  """
  <Purpose>
    Build a XML-RPC method response.

  <Arguments>
    param:
      The value to be returned.

  <Exceptions>
    None.

  <Side Effects>
    None.

  <Returns>
    The XML-RPC method response string.

  """
  xml_string = '<?xml version="1.0"?><methodResponse>'
  xml_string += xmlrpc_params_to_xml((param,))
  xml_string += "</methodResponse>"

  return xml_string


def xmlrpc_method_fault_to_xml(message, code):
  """
  <Purpose>
    Build a XML-RPC fault response.

  <Arguments>
    message:
      A string describing the fault.

    code:
      The integer code associated with the fault.

  <Exceptions>
    None.

  <Side Effects>
    None.

  <Returns>
    The XML-RPC fault response string.

  """
  struct = {"faultCode": code, "faultString": message}
  xml_string = '<?xml version="1.0"?><methodResponse><fault>'
  xml_string += xmlrpc_value_to_xml(struct)
  xml_string += "</fault></methodResponse>"

  return xml_string


def xmlrpc_params_to_xml(params):
  """
  <Purpose>
    Translate Python values to XML-RPC parameters.

  <Arguments>
    params:
      A sequence type of XML-RPC parameters.  A dictionary may also be
      passed, but the keys are ignored.

  <Exceptions>
    None.

  <Side Effects>
    None.

  <Returns>
    The XML-RPC parameters string.

  """
  xml_string = "<params>"

  for param in params:
    xml_string += "<param>%s</param>" % xmlrpc_value_to_xml(param)

  xml_string += "</params>"

  return xml_string


def xmlrpc_value_to_xml(obj):
  """
  <Purpose>
    Translate a Python value to XML-RPC.

  <Arguments>
    obj:
      The Python object to convert.

  <Exceptions>
    None.

  <Side Effects>
    None.

  <Returns>
    The XML-RPC value string.

  """
  object_type = type(obj)
  xml_string = "<value>"

  if obj is None:
    xml_string += "<nil/>"

  elif object_type is bool:
    xml_string += "<boolean>%d</boolean>" % int(obj)

  elif object_type in (int, long):
    xml_string += "<int>%d</int>" % obj

  elif object_type is float:
    xml_string += "<double>%f</double>" % obj

  elif object_type in (str, unicode):
    xml_string += "<string>%s</string>" % obj

  elif object_type in (list, tuple, xrange, set, frozenset):
    xml_string += "<array><data>"
    for value in obj:
      xml_string += xmlrpc_value_to_xml(value)
    xml_string += "</data></array>"

  elif object_type is dict:
    xml_string += "<struct>"
    for key, value in obj.iteritems():
      xml_string += "<member><name>%s</name>" % key
      xml_string += xmlrpc_value_to_xml(value)
      xml_string += "</member>"
    xml_string += "</struct>"

  elif object_type is xmlrpc_Binary:
    xml_string += "<base64>%s</base64>" % base64_encode(obj)

  else:
    raise ValueError("Marshaller: Unsupported type '%s'" % object_type)

  xml_string += "</value>"

  return xml_string


def xmlrpc_xml_to_python(xml):
  """
  <Purpose>
    Convert a XML-RPC payload to its Python equivalent.

  <Arguments>
    xml:
      The XML-RPC string to convert.

  <Exceptions>
    xmlrpc_Fault on decoding a XML-RPC fault.
    xmlrpc_XMLParseError on XML-RPC data parse error.
    xmlparse_XMLParseError on XML decoding error.

  <Side Effects>
    None.

  <Returns>
    A pair with (1) a boolean indicating this is a method call if True
    or a method response if False and (2) the method arguments or
    response, depending on (1).

  """
  try:
    return xmlrpc_method_call_to_python(xml)
  except xmlrpc_XMLParseError:
    pass

  try:
    return xmlrpc_method_response_to_python(xml)
  except xmlrpc_XMLParseError:
    pass

  try:
    return xmlrpc_method_fault_to_xml(xml)
  except xmlrpc_XMLParseError:
    pass

  raise xmlrpc_XMLParseError()


def xmlrpc_method_call_to_python(xml):
  """
  <Purpose>
    Convert a XML-RPC method call to its Python equivalent.

  <Arguments>
    xml:
      The XML-RPC string to convert.

  <Exceptions>
    xmlrpc_XMLParseError on a XML-RPC structural parse error.
    xmlparse_XMLParseError on a general XML parse error.

  <Side Effects>
    None.

  <Returns>
    A tuple containing (1) the method name and (2) a list of the
    parameters.

  """
  xml_node = xmlparse_parse(xml)

  if xml_node.tag_name != "methodCall":
    message = "Unexpected root node: %s" % xml_node.tag_name
    raise xmlrpc_XMLParseError(message)
  elif len(xml_node.children) > 2:
    raise xmlrpc_XMLParseError("Too many children for 'methodCall'")

  try:
    method_name_node = xml_node.children[0]
    if method_name_node.tag_name != "methodName":
      message = "Unexpected XML node: %s" % method_name_node.tag_name
      raise xmlrpc_XMLParseError(message)
    method_name = method_name_node.content
  except KeyError:
    raise xmlrpc_XMLParseError("No method name found")

  try:
    params = xmlrpc_params_to_python(xml_node.children[1])
  except KeyError:
    raise xmlrpc_XMLParseError("No parameters found")

  return (method_name, params)


def xmlrpc_method_response_to_python(xml):
  """
  <Purpose>
    Convert a XML-RPC method response to its Python equivalent.

  <Arguments>
    xml:
      The XML-RPC string to convert.

  <Exceptions>
    xmlrpc_XMLParseError on a XML-RPC structural parse error.
    xmlparse_XMLParseError on a general XML parse error.

  <Side Effects>
    None.

  <Returns>
    The method results or a xmlrpc_Fault on reading a fault.

  """
  xml_node = xmlparse_parse(xml)

  if xml_node.tag_name != "methodResponse":
    message = "Unexpected root node: %s" % xml_node.tag_name
    raise xmlrpc_XMLParseError(message)
  elif len(xml_node.children) > 1:
    raise xmlrpc_XMLParseError("Too many children for 'methodCall'")

  fault_node = xml_node.children[0]
  if fault_node.tag_name == "fault":
    if len(fault_node.children) > 1:
      raise xmlrpc_XMLParseError("Too many children for 'fault'")
    params = xmlrpc_value_to_python(fault_node.children[0])
    return xmlrpc_Fault(params["faultString"], params["faultCode"])

  try:
    params = xmlrpc_params_to_python(xml_node.children[0])
  except KeyError:
    raise xmlrpc_XMLParseError("No parameters found")

  if len(params) > 1:
    raise xmlrpc_XMLParseError("Too many children for 'params'")

  return params[0]


def xmlrpc_params_to_python(xml_node):
  """
  <Purpose>
    Convert XML-RPC params the Python equivalent.

  <Arguments>
    xml_node:
      The XML node to consider.

  <Exceptions>
    xmlrpc_XMLParseError on a XML-RPC structural parse error.

  <Side Effects>
    None.

  <Returns>
    The method results.

  """
  if xml_node.tag_name != "params":
    message = "Unexpected XML node: %s" % xml_node.tag_name
    raise xmlrpc_XMLParseError(message)

  params = []

  for param_node in xml_node.children:
    if param_node.tag_name != "param":
      message = "Unexpected XML node: %s" % param_node.tag_name
      raise xmlrpc_XMLParseError(message)
    if len(param_node.children) > 1:
      raise xmlrpc_XMLParseError("Too many children for 'param'")
    params.append(xmlrpc_value_to_python(param_node.children[0]))

  return params


def xmlrpc_value_to_python(xml_node):
  """
  <Purpose>
    Convert a XML-RPC value the Python equivalent.

  <Arguments>
    xml_node:
      The XML node to consider.

  <Exceptions>
    xmlrpc_XMLParseError on a XML-RPC structural parse error.

  <Side Effects>
    None.

  <Returns>
    The method results.

  """
  if xml_node.tag_name not in ("value"):
    message = "Unexpected XML node: %s" % xml_node.tag_name
    raise xmlrpc_XMLParseError(message)
  elif len(xml_node.children) > 1:
    raise xmlrpc_XMLParseError("Too many children for 'value'")

  value_node = xml_node.children[0]
  tag = value_node.tag_name
  value = value_node.content

  if tag == "nil":
    return None

  elif tag == "boolean":
    return bool(value)

  elif tag in ("i4", "int"):
    return int(value)

  elif tag == "double":
    return long(value)

  elif tag == "string":
    return value

  elif tag == "array":
    if len(value_node.children) > 1:
      raise xmlrpc_XMLParseError("Too many children for 'array'")
    data_node = value_node.children[0]
    result = []
    for item_node in data_node:
      result.append(xmlrpc_value_to_python(item_node))
    return result

  elif tag == "struct":
    result = {}

    for member_node in value_node.children:
      if len(member_node.children) != 2:
        message = "Incorrect number of children for 'member'"
        raise xmlrpc_XMLParseError(message)

      key = member_node.children[0].content
      value = xmlrpc_value_to_python(member_node.children[1])

      result[key] = value

    return result

  elif tag == "base64":
    return xmlrpc_Binary(base64_decode(value_node.content))

  else:
    message = "Demashaller: Unsupported value type: %s" % value_node.tag_name
    raise xmlrpc_XMLParseError(message)
    return value
