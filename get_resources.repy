"""
Author: Monzur Muhammad
Description:
Given a vessel name the functions finds the correct vessel and print out all the resources available.
"""

include nmclient.repy
include rsa.repy

"""
<Purpose>
  Find all the vessels that have the port number requested and then return a dictionary with all the resources
	
<Arguments>
  pubkey(string) - the public key of user encrypted into 
  portNum(int) - the port number that the user is looking for 
	
<Result>
  returns a dictionary where the keys are the vessel name and the values are a list of resources
"""
def get_vesselPort_resources(portNum, pubkey):	

  #checks to see if  public key is valid
  if not rsa_is_valid_publickey(pubkey):
    raise ValueError, "Invalid public key"

  nmhandle = nmclient_createhandle(getmyip(), 1224)
	
  #dictionary that contains all the resources for the vessel
  resultDict={}
	
  #get a list of all the vessels that the user can access/use
  vessel_group = nmclient_listaccessiblevessels(nmhandle, pubkey)
	
  #go through the two groups of vessels. vessel_group is in the form ([][])
  for group in vessel_group:
	
    for cur_vessel in group:

      #if the list is null, then ignore it and move on to the next vessel name
      try:
        fullresources = nmclient_rawsay(nmhandle, "GetVesselResources",cur_vessel)
      except:
        continue
			
      #check to see if the current vessel has the port number as one of the resource, if not then continue on to the next vessel
      if not str(portNum) in fullresources:
        continue
			
      else:
        #initialize the value for the current vessel as an empty list
        resultDict[cur_vessel]=[]
				
        for cur_resource in fullresources.split('\n'):
          if 'resource' in cur_resource:
            #gets rid of the keyword 'resource' and just adds the port numbers and their type to the dictionary
            resultDict[cur_vessel].append(cur_resource.split('resource')[1].split('#')[0])
					
  return resultDict

  
"""
<Purpose>
	Given a vessel name, find all the resources available for that vessel and return a dictionary of the resources
	
<Arguments>
	pubkey(string) - the public key of user encrypted into 
	vesselname(string) - the vessel that the user wants the resource for
	
<Result>
	returns a dictionary where the keys are the vessel name and the values are a list of resources
"""	
def get_vesselName_resources(vesselName, pubkey):

  #checks to see if  public key is valid
  if not rsa_is_valid_publickey(pubkey):
    raise ValueError, "Invalid public key"

  nmhandle = nmclient_createhandle(getmyip(), 1224)
	
  #dictionary that contains all the resources for the vessel
  resultDict={}

  #initialize the list for the vessel that the user is looking for  
  resultDict[vesselName]=[]
	
  #if vessel name is invalid, throw an error
  try:
    fullresources = nmclient_rawsay(nmhandle, "GetVesselResources",vesselName)
  except InvalidVessel:
    raise VesselError, "Invalid vessel name"

  for cur_resource in fullresources.split('\n'):
    if 'resource' in cur_resource:
      #gets rid of the keyword 'resource' and just adds the port numbers and their type to the return string
      resultDict[vesselName].append(cur_resource.split('resource')[1].split('#')[0])
		
  return resultDict
					

	

